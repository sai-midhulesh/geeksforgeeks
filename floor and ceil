Given an unsorted array Arr[] of N integers and an integer X, find floor and ceiling of X in Arr[0..N-1].
Floor of X is the largest element which is smaller than or equal to X. Floor of X doesn’t exist if X is smaller than smallest element of Arr[].
Ceil of X is the smallest element which is greater than or equal to X. Ceil of X doesn’t exist if X is greater than greatest element of Arr[].

Example 1:
Input:
N = 8, X = 7
Arr[] = {5, 6, 8, 9, 6, 5, 5, 6}
Output: 6 8
Explanation:
Floor of 7 is 6 and ceil of 7 
is 8.

code:
def getFloorAndCeil(arr, n, x):
    arr.sort()
    def floo(a,n,x):
        low = 0
        high = n - 1
        ans = -1
        while (low<=high):
            mid = (low+high)//2
            if (a[mid]<=x):
                ans = a[mid]
                low = mid + 1
            else:
                high = mid - 1
        return ans
    def ciil(a,n,x):
        low = 0
        high = n - 1
        ans1 = -1
        while (low<=high):
            mid = (low+high)//2
            if (a[mid]>=x):
                ans1 = a[mid]
                high = mid - 1
            else:
                low = mid + 1
        return ans1
    return floo(arr,n,x),ciil(arr,n,x)
